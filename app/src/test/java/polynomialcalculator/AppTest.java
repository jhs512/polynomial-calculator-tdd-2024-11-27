/*
 * This source file was generated by the Gradle 'init' task
 */
package polynomialcalculator;

import org.junit.jupiter.api.Test;

import static org.assertj.core.api.Assertions.assertThat;

import org.junit.jupiter.api.DisplayName;

// 1순위 : 3+5 = 8
// 2순위 : 8 *5 = 40
// 3순위 : 40 - 10 = 30
// 4순위 : 30 * 10 = 300
// 5순위 : 300 / 5 = 60

class AppTest {
    @Test
    @DisplayName("다항식 계산 시작")
    public void t1() {
        int rs = Calc.run("((3 + 5) * 5 + -10) * 10 / 5");
        
        assertThat(rs).isEqualTo(60);
    }

    // ((3 + 5) * 5 + -10) * 10 / 5 중 ((3 + 5)) 먼저 진행 
    @Test
    @DisplayName("((3 + 5) * 5 + -10) * 10 / 5 : 3+5먼저 진행, 기대값은 8")
    public void t2() {
        int rs = Calc.run("((3 + 5))");
        
        assertThat(rs).isEqualTo(8);
    }

    // ((3 + 5) * 5 + -10) * 10 / 5 중 ((3 + 5)) 먼저 진행 
    @Test
    @DisplayName("((3 + 5) * 5 + -10) * 10 / 5 : ((3 + 5) * 5)먼저 진행, 기대값은 40")
    public void t3() {
        int rs = Calc.run("((3 + 5) * 5)");
        
        assertThat(rs).isEqualTo(40);
    }

    // ((3 + 5) * 5 + -10) * 10 / 5 중 ((3 + 5) * 5 + -10) 먼저 진행 
    @Test
    @DisplayName("((3 + 5) * 5 + -10) * 10 / 5 : ((3 + 5) * 5 + -10) 먼저 진행, 기대값은 30")
    public void t4() {
        int rs = Calc.run("((3 + 5) * 5 + -10)");
        
        assertThat(rs).isEqualTo(30);
    }

    // ((3 + 5) * 5 + -10) * 10 / 5 중 ((3 + 5) * 5 + -10) * 10  먼저 진행 
    @Test
    @DisplayName("((3 + 5) * 5 + -10) * 10 / 5 : ((3 + 5) * 5 + -10) * 10 먼저 진행, 기대값은 300")
    public void t5() {
        int rs = Calc.run("((3 + 5) * 5 + -10) * 10 ");
        
        assertThat(rs).isEqualTo(300);
    }

    @Test
    @DisplayName("다항식 계산 로직 전부 구현 ")
    public void t6() {
        int rs = Calc.run("((3 + 5) * 5 + -10) * 10 / 5");
        
        assertThat(rs).isEqualTo(60);
    }

    // 여기서 부터는 재귀DFS 방법 

    @Test
    @DisplayName("다항식 계산 시작 : 재귀 방식")
    public void t7() {
        int rs = CalcDfs.run("((3 + 5) * 5 + -10) * 10 / 5");
        
        assertThat(rs).isEqualTo(60);
    }

    // ((3 + 5) * 5 + -10) * 10 / 5 중 ((3 + 5)) 먼저 진행 
    @Test
    @DisplayName("((3 + 5) * 5 + -10) * 10 / 5 : 3+5먼저 진행, 기대값은 8 ver.재귀")
    public void t8() {
        int rs = CalcDfs.run("((3 + 5))");
        
        assertThat(rs).isEqualTo(8);
    }

    // ((3 + 5) * 5 + -10) * 10 / 5 중 ((3 + 5)) 먼저 진행 
    @Test
    @DisplayName("((3 + 5) * 5 + -10) * 10 / 5 : ((3 + 5) * 5)먼저 진행, 기대값은 40 ver.재귀")
    public void t9() {
        int rs = CalcDfs.run("((3 + 5) * 5)");
        
        assertThat(rs).isEqualTo(40);
    }

    // ((3 + 5) * 5 + -10) * 10 / 5 중 ((3 + 5) * 5 + -10) 먼저 진행 
    @Test
    @DisplayName("((3 + 5) * 5 + -10) * 10 / 5 : ((3 + 5) * 5 + -10) 먼저 진행, 기대값은 30  ver.재귀")
    public void t10() {
        int rs = CalcDfs.run("((3 + 5) * 5 + -10)");
        
        assertThat(rs).isEqualTo(30);
    }

    // ((3 + 5) * 5 + -10) * 10 / 5 중 ((3 + 5) * 5 + -10) * 10  먼저 진행 
    @Test
    @DisplayName("((3 + 5) * 5 + -10) * 10 / 5 : ((3 + 5) * 5 + -10) * 10 먼저 진행, 기대값은 300  ver.재귀")
    public void t11() {
        int rs = CalcDfs.run("((3 + 5) * 5 + -10) * 10 ");
        
        assertThat(rs).isEqualTo(300);
    }

    @Test
    @DisplayName("다항식 계산 로직 전부 구현 ver.재귀 ")
    public void t12() {
        int rs = CalcDfs.run("((3 + 5) * 5 + -10) * 10 / 5 ");
        
        assertThat(rs).isEqualTo(60);
    }

    @Test
    @DisplayName("다항식 계산 번외 ver.재귀 ")
    public void t13() {
        int rs = CalcDfs.run("((80 - 5) / 5 + 100) * -55 / 5 ");
        
        assertThat(rs).isEqualTo(-1265);
    }

    @Test
    @DisplayName("다항식 계산 번외 ver.재귀2 ")
    public void t14() {
        int rs = CalcDfs.run("(3 + 5) * (5 - 2)");
        
        assertThat(rs).isEqualTo(24);
    }
}
